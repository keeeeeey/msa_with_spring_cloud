plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.9'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.5")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'com.h2database:h2'

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // modelmapper
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.8'

    // JsonWebToken
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'

    // spring-cloud-starter-config
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-config', version: '4.0.1'

    // spring-cloud-start-bootstrap
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: '4.0.1'

    // springboot-starter-actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // bus-amqp
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bus-amqp', version: '4.0.1'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

// ./gradlew bootRun -Pargs="--server.port=9003"
bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
}
